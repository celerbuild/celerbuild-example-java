name: celerbuild-example-java-dev
env: dev
# Repository URL supports two formats:
# 1. HTTPS format (recommended for public repositories): https://github.com/celerbuild/celerbuild-example-java.git
# 2. SSH format (requires SSH key configuration): git@github.com:celerbuild/celerbuild-example-java.git
#    When using SSH format, you need to add the server's public key where Celerbuild is deployed to any GitHub account
repoPath: https://github.com/celerbuild/celerbuild-example-java.git

# Specify the server path for project deployment
targetDeployPath: /home/ubuntu/apps/java

# Specify the warehouse path on target server for storing deployment packages
targetDeployWarehousePath: /home/ubuntu/repos/java

# Number of versions to keep in the warehouse repository
targetWarehouseVersionKeep: 3

# serverClusterID: Please select an actual existing server cluster after importing the template
# The ID will be different in your environment
serverClusterID: 41

# deployMode: Supports two modes
# - branch: for development environment
# - tag: for production environment
deployMode: branch

# Specify the actual user account on the target deployment server
deployUser: ubuntu

# buildCmds: Commands executed during the build phase
# These commands are executed on the build server to create deployment packages
buildCmds: |-
  # Check the operating system type
  OS=$(uname)

  # Create package based on OS type
  if [ "$OS" = "Darwin" ]; then
      # For macOS, include mac-specific options
      tar --no-xattrs --no-mac-metadata -zcvf ${LOCAL_PACKAGE_FILE} *
  else
      # For Linux and other systems, use standard options
      tar --no-xattrs -zcvf ${LOCAL_PACKAGE_FILE} *
  fi

# preDeploymentCmds: Commands executed before deployment
# These commands run on target servers before the new version is deployed
preDeploymentCmds: ''

# postDeploymentCmds: Commands executed after deployment
# These commands run on target servers after the new version is deployed
# Typically used for service restart, permission updates, and deployment verification
postDeploymentCmds: |-
  #!/bin/bash

  # Define project directories
  DEPLOY_USER="${DEPLOY_USER}"  # Deployment user (e.g., ubuntu, ec2-user, etc.)
  SOURCE_DIR="${TARGET_DEPLOYMENT_PATH}/${TARGET_DEPLOYMENT_PROJECT_NAME}"
  DEST_DIR="/home/${DEPLOY_USER}/celerbuild-example-java"

  # Check if the destination directory exists
  if [ ! -d "$DEST_DIR" ]; then
      sudo mkdir -p "$DEST_DIR"
      echo "Directory $DEST_DIR created."
  fi

  # Stop existing application if running
  if systemctl is-active --quiet celerbuild-example-java; then
      sudo systemctl stop celerbuild-example-java
      echo "Stopped existing application"
  else
      echo "No existing application running"
  fi

  # Clean up existing directory and copy new contents
  sudo rm -rf "$DEST_DIR"/*
  sudo cp -r "$SOURCE_DIR"/. "$DEST_DIR"

  # Fix permissions for Maven build
  sudo chown -R ${DEPLOY_USER}:${DEPLOY_USER} "$DEST_DIR"

  # Change to project directory
  cd "$DEST_DIR"

  # Clean Maven target directory with sudo
  sudo rm -rf target/

  # Skip tests during Maven build and package process
  mvn clean package -DskipTests

  # Check if build was successful
  if [ $? -eq 0 ] && [ -f target/*.jar ]; then
      # Copy JAR file to the correct location
      sudo cp target/*.jar app.jar
  
      # Set environment profile (dev/prod based on deployment)
      sudo sed -i 's/SPRING_PROFILES_ACTIVE=.*/SPRING_PROFILES_ACTIVE=dev/' /etc/systemd/system/celerbuild-example-java.service
  
      # Reload systemd configuration
      sudo systemctl daemon-reload
  
      # Start application
      sudo systemctl start celerbuild-example-java
      echo "Application started with dev profile"
  else
      echo "Maven build failed or JAR file not found"
      exit 1
  fi
# specifyBranches: Supports multiple branches separated by commas (e.g., "dev,test,staging")
# Recommendation: Specify a limited number of branches for better performance
specifyBranches: dev
